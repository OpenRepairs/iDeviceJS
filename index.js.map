{"version":3,"file":"index.js","sourceRoot":"/","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["\n\nlet EventEmitter = require('events');\nlet plist = require('plist');\nlet extend = require('extend');\nlet fs = require('fs');\nconst path = require('path');\n\nlet exec = require('./exec');\n\nlet _checkSerial = (serial:string) => {\n    return /^[a-z0-9]{40,40}$/.test(serial)\n        || /^[A-Z0-9]{8}-[A-Z0-9]{16}$/.test(serial); // fix for iphone xs xr xmax\n};\n\n\ninterface ScreenDetails {\n    width: number,\n    height: number,\n    scale: number,\n    points: {\n        width: number|null,\n        height: number|null\n    }\n}\n\nclass iDeviceClient extends EventEmitter {\n    constructor() {\n        super();\n    }\n\n    listDevices() {\n        return exec('idevice_id', ['-l']).then((stdout:string) => {\n            let devices = stdout.split('\\n');\n            let result = [];\n            for (let device of devices) {\n                device = device.trim();\n                if (_checkSerial(device)) {\n                    result.push(device);\n                }\n            }\n            return result;\n        });\n    }\n\n    // ## raw api ##\n\n    getProperties(serial:string, option: {simple:boolean|undefined, domain: string|undefined} = {simple: undefined, domain: undefined}) {\n        if (!_checkSerial(serial)) return Promise.reject('invalid serial number');\n        const args = ['-u', serial, '-x']\n        if (option) {\n            if (('simple' in option) && (option['simple'])) {\n                args.push('-s');\n            }\n            if (('domain' in option) && (option['domain'])) {\n                args.push('-q', option['domain']);\n            }\n        }\n        return exec('ideviceinfo', args).then((stdout:string) => {\n            try {\n                let result = plist.parse(stdout);\n                return result;\n            } catch (e) {\n                throw e;\n            }\n        });\n    }\n\n    getPackages(serial:string, option: {\n        list: 'user'|'system'|'all'\n    }) {\n        if (!_checkSerial(serial)) return Promise.reject('invalid serial number');\n        let defaultOption = {\n            'list': 'user'\n        };\n        defaultOption = extend(true, defaultOption, option);\n        const args = ['-u', serial, '-l', '-o', 'xml']\n        if (defaultOption['list'] === 'system') {\n            args.push('-o', 'list_system');\n        }\n        if (defaultOption['list'] === 'all') {\n            args.push('-o', 'list_all');\n        }\n\n        return exec('ideviceinstaller', args).then((stdout:string) => {\n            try {\n                let result = [];\n                let packages = plist.parse(stdout);\n                for (let packageObj of packages) {\n                    result.push(packageObj['CFBundleIdentifier']);\n                }\n                return result;\n            } catch (e) {\n                throw e;\n            }\n        });\n    }\n\n    diagnostics(serial:string, option: {\n        command: string,\n        key: string\n    }) {\n        if (!_checkSerial(serial)) return Promise.reject('invalid serial number');\n        let defaultOption = {\n            'command': 'diagnostics',\n            'key': 'All',\n        };\n        defaultOption = extend(true, defaultOption, option);\n        const args = ['-u', serial, defaultOption['command']]\n        if (('key' in defaultOption) && (defaultOption['key'])) {\n            args.push(defaultOption['key']);\n        }\n        return exec('idevicediagnostics', args).then((stdout:string) => {\n            try {\n                let result = plist.parse(stdout);\n                return result;\n            } catch (e) {\n                throw e;\n            }\n        });\n    }\n\n    screencap(serial:string, option: {\n        format: 'png'|'jpg'\n    }) {\n        if (!_checkSerial(serial)) return Promise.reject('invalid serial number');\n        let defaultOption = {\n            format: 'png'\n        }\n        defaultOption = extend(true, defaultOption, option);\n        let sharp = require('sharp');\n        let tempfile = require('tempfile');\n        let tempTiffFile = tempfile('.tiff');\n        return new Promise((resolve, reject) => {\n            exec('idevicescreenshot', ['-u', serial, tempTiffFile]).then((stdout:string) => {\n                let outputStream = sharp(tempTiffFile).toFormat(defaultOption.format).on('error', (err: Error) => {\n                    reject(err);\n                });\n                resolve(outputStream);\n            }, reject);\n        });\n    }\n\n    install(serial:string, ipa:string, option: {\n        resign?: boolean,\n        mobileprovision?: string,\n        identity?: string,\n        keychainPassword?: string\n    }) {\n        if (!_checkSerial(serial)) return Promise.reject('invalid serial number');\n        if (!fs.existsSync(ipa)) return Promise.reject(`ipa file ${ipa} not exists`);\n        let defaultOption = {\n            resign: false,\n            mobileprovision: './develop.mobileprovision',\n            identity: 'iPhone Developer: xxxx (XXXXXXXXXX)',\n            keychainPassword: ''\n        };\n        defaultOption = extend(true, defaultOption, option);\n        let resultPromise;\n        if (defaultOption.resign) {\n            let path = require('path');\n            let shell = path.join(__dirname, 'tools', 'r.sh');\n            resultPromise = exec(['sh', shell, ipa, defaultOption.mobileprovision,\n                                    defaultOption.identity, ipa, defaultOption.keychainPassword], {timeout: 300000});\n        } else {\n            resultPromise = Promise.resolve();\n        }\n        return resultPromise.then(() => {\n            return new Promise((resolve, reject) => {\n                exec('ideviceinstaller', ['-u', serial, '-i', ipa], {timeout: 300000}).then((output:string) => {\n                    if (/\\s - Complete\\s/.test(output)) {\n                        resolve(output);\n                    } else {\n                        reject(output);\n                    }\n                }, (code: any, stdout:string, stderr:string) => {\n                    reject(code);\n                });\n            })\n        });\n    }\n\n    syslog(serial:string, ipa:string) {\n        if (!_checkSerial(serial)) return Promise.reject('invalid serial number');\n        let patternFile = require('path').join(__dirname, 'patterns.yml');\n        let spawn = require('child_process').spawn;\n        let emitter = new EventEmitter();\n        let process = spawn('idevicesyslog', ['-u', serial]);\n        let Logparser = require('logagent-js');\n        let lp = new Logparser(patternFile);\n        process.stdout.setEncoding('utf8');\n        process.stdout.on('data', (data:any) => {\n            let str = data.toString(),\n                lines = str.split(/(\\r?\\n)/g);\n            for (let line of lines) {\n                lp.parseLine(line, 'log', (err:Error, data: string) => {\n                    if (err) {\n                    } else {\n                        emitter.emit('log', data);\n                    }\n                });\n            }\n        });\n        process.stdout.on('end', () => {\n            emitter.emit('close');\n        });\n        emitter.on('close', () => {\n            process.kill();\n        });\n        return Promise.resolve(emitter);\n    }\n\n    reboot(serial:string) {\n        if (!_checkSerial(serial)) return Promise.reject('invalid serial number');\n        return exec('idevicediagnostics', ['restart', '-u', serial]).then(() => {\n            return true;\n        });\n    }\n\n    shutdown(serial:string) {\n        if (!_checkSerial(serial)) return Promise.reject('invalid serial number');\n        return exec('idevicediagnostics', ['shutdown', '-u', serial]).then(() => {\n            return true;\n        });\n    }\n\n    name(serial:string, newName:string) {\n        if (!_checkSerial(serial)) return Promise.reject('invalid serial number');\n        const args = ['-u', serial];\n\n        if(typeof newName !== 'undefined') {\n            args.push(newName);\n        }\n        return exec('idevicename', args).then((result:string) => {\n            return result.trim();\n        });\n    }\n\n    // ## shortcut method ##\n\n    getBasicInformation(serial:string) {\n        return this.getProperties(serial)\n            .then((result:{ProductType:string}) => {\n                let type = result['ProductType'];\n                let map = require('./map.json');\n                if (type in map) {\n                    return map[type];\n                }\n                return {};\n            });\n    }\n\n    getResolution(serial:string) {\n        interface ScreenResult {\n            ScreenWidth: string,\n            ScreenHeight: string,\n            ScreenScaleFactor: string\n        }\n        return this.getProperties(serial, {simple: undefined, domain: 'com.apple.mobile.iTunes'})\n            .then((result:ScreenResult) => {\n                let resolution: ScreenDetails = {\n                    width: parseInt(result['ScreenWidth'], 10),\n                    height: parseInt(result['ScreenHeight'], 10),\n                    scale: parseInt(result['ScreenScaleFactor'], 10),\n                    points: {\n                        width: null,\n                        height: null\n                    }\n                };\n                let points = {\n                    width: Math.floor(resolution.width / resolution.scale),\n                    height: Math.floor(resolution.height / resolution.scale)\n                }; \n                if ((resolution.width === 1080) && (resolution.height === 1920)) {\n                    // There is some diffences between Physical Pixels and Rendered Pixels\n                    // on device iPhone [6,6s,7] plus.\n                    points = {\n                        width: 414,\n                        height: 736\n                    };\n                }\n                resolution.points = points;\n                return resolution;\n            });\n    }\n\n    getStorage(serial:string) {\n        return this.getProperties(serial, {simple: undefined, domain: 'com.apple.disk_usage'})\n            .then((result: {[key: string]:number}) => {\n                let size = result['TotalDataCapacity'];\n                let free = result['TotalDataAvailable'];\n                let used = size - free;\n                return {\n                    size: size,\n                    used: used,\n                    free: free,\n                    free_percent: (free * 100 / (size + 2)).toFixed(10) + '%'\n                }\n            });\n    }\n\n    getBattery(serial:string) {\n        return this.getProperties(serial, {simple: undefined, domain: 'com.apple.mobile.battery'})\n            .then((result: { [key: string]:string}) => {\n                result['level'] = result['BatteryCurrentCapacity'];\n                return result;\n            });\n    }\n\n    getDeveloperStatus(serial:string) {\n        return this.getProperties(serial, {simple: undefined, domain: 'com.apple.xcode.developerdomain'})\n            .then((result: { [key: string]: string }) => {\n                return result['DeveloperStatus'];\n            });\n    }\n\n    crashreport(serial:string, appName:string) {\n        if (!_checkSerial(serial)) return Promise.reject('invalid serial number');\n        return exec('mktemp', ['-d']).then((tmpDir:string) => {\n            tmpDir = tmpDir.trim();\n            return exec('idevicecrashreport', ['-u', serial, '-e', tmpDir]).then(() => {\n                let crashLogRegex = new RegExp(`^${appName}.*\\.ips$`); \n                let result:{currentFile: string|undefined} = {\n                    currentFile: undefined\n                };\n                fs.readdirSync(tmpDir).forEach((currentFile:string) => {\n                    let crashLogFileName = crashLogRegex.exec(currentFile);\n                    if (crashLogFileName !== null) {\n                        result.currentFile = fs.readFileSync(path.join(tmpDir, currentFile), 'utf8');\n                    }\n                });\n                \n                return result; \n            });\n        });\n    }\n}\n\nmodule.exports = new iDeviceClient();\n"]}