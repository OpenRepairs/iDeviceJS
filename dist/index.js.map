{"version":3,"file":"index.js","sourceRoot":"/","sources":["index.ts"],"names":[],"mappings":"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","sourcesContent":["\nimport { EventEmitter } from 'events';\nimport plist = require('plist');\nimport extend = require('extend');\nimport fs = require('fs');\nimport path = require('path');\nimport exec from './exec';\n\nlet _checkSerial = (serial:string) => {\n    return /^[a-z0-9]{40,40}$/.test(serial)\n        || /^[A-Z0-9]{8}-[A-Z0-9]{16}$/.test(serial); // fix for iphone xs xr xmax\n};\n\ninterface ScreenDetails {\n    width: number,\n    height: number,\n    scale: number,\n    points: {\n        width: number|null,\n        height: number|null\n    }\n}\n\ninterface StorageDetails {\n    size: number,\n    used: number,\n    free: number,\n    free_percent: number\n}\n\ntype DeviceSerial = string;\n\nclass iDeviceClient extends EventEmitter {\n    constructor(){\n        super();\n    }\n\n\n    /**\n     * Gets a list of all currently connected devices.\n     * @returns {Promise<DeviceSerial[]>} A promise that resolves with an array containing the I/O serials of the connected devices.\n     */\n    listDevices() {\n        return exec('idevice_id', ['-l']).then(output => {\n            let stdout = output[0];\n            let stderr = output[1];\n\n            let devices = stdout.split('\\n');\n            let result:DeviceSerial[] = [];\n            for (let device of devices) {\n                device = device.trim();\n                if (_checkSerial(device)) {\n                    result.push(device as DeviceSerial);\n                }\n            }\n            return result;\n        });\n    }\n\n    /**\n     * Retrieves properties of a device.\n     *\n     * @param {DeviceSerial} serial - The serial number of the device.\n     * @param {object} option - The options for retrieving properties. This object can contain the following properties:\n     *   - simple: If true, retrieves only the simple properties. Default is undefined.\n     *   - domain: Specifies the domain of the properties to retrieve. Default is undefined.\n     * @returns {Promise<plist.PlistObject>} A promise that resolves with the properties of the device, or rejects with an error message if the serial number is invalid.\n     * @throws {Error} If there is an error parsing the properties.\n     */    \n    getProperties(serial:DeviceSerial, option: {simple:boolean|undefined, domain: string|undefined}): Promise<plist.PlistObject> {\n        if (!_checkSerial(serial)) return Promise.reject('Invalid I/O serial number');\n        const args = ['-u', serial, '-x']\n        if (option) {\n            if (('simple' in option) && (option['simple'])) {\n                args.push('-s');\n            }\n            if (('domain' in option) && (option['domain'])) {\n                args.push('-q', option['domain']);\n            }\n        }\n        return exec('ideviceinfo', args).then(output => {\n            try {\n                let stdout = output[0];\n                let stderr = output[1];\n\n                let result = plist.parse(stdout);\n                return result as plist.PlistObject;\n            } catch (e) {\n                throw e;\n            }\n        });\n    }\n    \n    /**\n     * Gets the device name.\n     *\n     * @param {DeviceSerial} serial - The serial number of the device.\n     * @param {object} option - The options for retrieving the device name. This object can contain the following properties:\n     *  - list: Specifies the types of packages to list. Default is 'user', otherwise can be 'system' or 'all'.\n     * @returns {Promise<string>} A promise that resolves with the device name, or rejects with an error message if the serial number is invalid.\n     */\n    getPackages(serial:DeviceSerial, option: {\n        list: 'user'|'system'|'all'\n    } = {list: 'user'}) {\n        if (!_checkSerial(serial)) return Promise.reject('invalid serial number');\n        \n\n        const args = ['-u', serial, '-l', '-o', 'xml']\n        if (option['list'] === 'system') {\n            args.push('-o', 'list_system');\n        }\n        if (option['list'] === 'all') {\n            args.push('-o', 'list_all');\n        }\n\n        return exec('ideviceinstaller', args).then(output => {\n            try {\n                let stdout = output[0];\n                let stderr = output[1];\n\n                let result = [];\n                let packages = plist.parse(stdout) as plist.PlistObject[];\n                for (let packageObj of packages) {\n                    result.push(packageObj['CFBundleIdentifier']);\n                }\n                return result;\n            } catch (e) {\n                throw e;\n            }\n        });\n    }\n\n    /**\n     * Retrieves various diagnostics of the devices.\n     * @param {DeviceSerial} serial \n     * @param {object} option \n     * @returns {Promise<object>}  A promise that resolves with the diagnostics of the device, or rejects with an error message if the serial number is invalid.\n     */\n    diagnostics(serial:DeviceSerial, option: {\n        command: string,\n        key: string\n    } = {command: 'diagnostics', key: 'All'}) {\n        if (!_checkSerial(serial)) return Promise.reject('invalid serial number');\n\n        \n        const args = ['-u', serial, option['command']]\n        if (('key' in option) && (option['key'])) {\n            args.push(option['key']);\n        }\n        return exec('idevicediagnostics', args).then(output => {\n            try {\n                let stdout = output[0];\n                let stderr = output[1];\n\n                let result = plist.parse(stdout);\n                return result;\n            } catch (e) {\n                throw e;\n            }\n        });\n    }\n\n    /**\n     * This function starts a syslog service for a device with a given serial number.\n     * It uses the 'idevicesyslog' command to start the service, and emits log data as it is received.\n     * If the serial number is invalid, it returns a rejected Promise.\n     * \n     * @param {DeviceSerial} serial - The serial number of the device.\n     * @returns {Promise<EventEmitter>} - Returns a Promise that resolves to an EventEmitter. The EventEmitter emits 'log' events with the log data, and a 'close' event when the syslog service ends.\n     * @deprecated This function is currently deprecated due to it's buggy nature, and will be removed in a future release.\n     * @throws Will throw an error if the serial number is invalid.\n    */\n    syslog(serial:DeviceSerial) {\n        if (!_checkSerial(serial)) return Promise.reject('invalid serial number');\n        let patternFile = require('path').join(__dirname, 'patterns.yml');\n        let spawn = require('child_process').spawn;\n        let emitter = new EventEmitter();\n        let process = spawn('idevicesyslog', ['-u', serial]);\n        let Logparser = require('logagent-js');\n        let lp = new Logparser(patternFile);\n        process.stdout.setEncoding('utf8');\n        process.stdout.on('data', (data:any) => {\n            let str = data.toString(),\n                lines = str.split(/(\\r?\\n)/g);\n            for (let line of lines) {\n                lp.parseLine(line, 'log', (err:Error, data: string) => {\n                    if (err.message) {\n                    } else {\n                        emitter.emit('log', data);\n                    }\n                });\n            }\n        });\n        process.stdout.on('end', () => {\n            emitter.emit('close');\n        });\n        emitter.on('close', () => {\n            process.kill();\n        });\n        return Promise.resolve(emitter);\n    }\n\n    /**\n     * This function will command the device to reboot\n     * @param {DeviceSerial} serial - The I/O serial number of the device.\n     * @returns {true} Returns true when complete\n     */\n    reboot(serial:DeviceSerial) {\n        if (!_checkSerial(serial)) return Promise.reject('invalid serial number');\n        return exec('idevicediagnostics', ['restart', '-u', serial]).then(() => {\n            return true;\n        });\n    }\n\n    /**\n     * This function will command the device to shutdown\n     * @param {DeviceSerial} serial - The I/O serial number of the device.\n     * @returns {true} Returns true when complete\n     */\n    shutdown(serial:DeviceSerial) {\n        if (!_checkSerial(serial)) return Promise.reject('invalid serial number');\n        return exec('idevicediagnostics', ['shutdown', '-u', serial]).then(() => {\n            return true;\n        });\n    }\n\n    /**\n     * This function will command the device to enter recovery mode\n     * @param {DeviceSerial} serial - The I/O serial number of the device.\n     * @returns {true} Returns true when complete\n     */\n    enterRecovery(serial:DeviceSerial) {\n        if (!_checkSerial(serial)) return Promise.reject('invalid serial number');\n        return exec('ideviceenterrecovery', [serial]).then(() => {\n            return true;\n        });\n    }\n\n    exitRecovery(serial:DeviceSerial) {\n        if (!_checkSerial(serial)) return Promise.reject('invalid serial number');\n        return exec('irecovery', ['-n', '-i', \"0x\" + serial.split(\"-\")[1].toLowerCase()]).then(() => {\n            return true;\n        });\n    }\n\n    /**\n     * This function will retrieve or set the name of the device.\n     * @param {DeviceSerial} serial - The I/O serial number of the device.\n     * @param {string} newName - The new name of the device.\n     * @returns {string} Returns confirmation new name of the device if it was set, otherwise returns original name.\n     */\n    name(serial:DeviceSerial, newName:string) {\n        if (!_checkSerial(serial)) return Promise.reject('invalid serial number');\n        const args = ['-u', serial];\n\n        if(typeof newName !== 'undefined') {\n            args.push(newName);\n        }\n        return exec('idevicename', args).then(output => {\n            let stdout = output[0];\n            return stdout.trim();\n        });\n    }\n\n    /**\n     * This function will retrieve the screen resolution of the device.\n     * @param {DeviceSerial} serial - The I/O serial number of the device.\n     * @returns {Promise<ScreenDetails>} A promise that resolves with the screen resolution of the device, or rejects with an error message if the serial number is invalid.\n     */\n    getResolution(serial:DeviceSerial) {\n        return this.getProperties(serial, {simple: undefined, domain: 'com.apple.mobile.iTunes'})\n            .then((result: plist.PlistObject) => {\n                let resolution: ScreenDetails = {\n                    width: parseInt(result['ScreenWidth'].toString(), 10),\n                    height: parseInt(result['ScreenHeight'].toString(), 10),\n                    scale: parseInt(result['ScreenScaleFactor'].toString(), 10),\n                    points: {\n                        width: null,\n                        height: null\n                    }\n                };\n                let points = {\n                    width: Math.floor(resolution.width / resolution.scale),\n                    height: Math.floor(resolution.height / resolution.scale)\n                }; \n                if ((resolution.width === 1080) && (resolution.height === 1920)) {\n                    // There is some diffences between Physical Pixels and Rendered Pixels\n                    // on device iPhone [6,6s,7] plus.\n                    points = {\n                        width: 414,\n                        height: 736\n                    };\n                }\n                resolution.points = points;\n                return resolution;\n            });\n    }\n\n    /**\n     * This function will retrieve the storage information of the device.\n     * @param {DeviceSerial} serial \n     * @returns {Promise<{StorageDetails}>}\n     */\n    getStorage(serial:DeviceSerial): Promise<StorageDetails> {\n        return this.getProperties(serial, {simple: undefined, domain: 'com.apple.disk_usage'})\n            .then((result: plist.PlistObject) => {\n                let size = result['TotalDataCapacity'] as number;\n                let free = result['TotalDataAvailable'] as number;\n                let used = size - free;\n                return {\n                    size: size,\n                    used: used,\n                    free: free,\n                    free_percent: (free * 100 / (size + 2))\n                } as StorageDetails\n            });\n    }\n\n    /**\n     * This function will retrieve the battery information of the device.\n     * @param {DeviceSerial} serial \n     * @returns {Promise<object>}\n     */\n    getBattery(serial:DeviceSerial) {\n        return this.getProperties(serial, {simple: undefined, domain: 'com.apple.mobile.battery'})\n            .then((result: plist.PlistObject) => {\n\n                const batteryInfo = { ...result };\n                batteryInfo['level'] = result['BatteryCurrentCapacity'] as string;\n                return batteryInfo;\n            });\n    }\n\n    \n    /**\n     * This function will retrieve the device's logs and save them to a temporary directory.\n     * @date 17/01/2024\n     *\n     * @param {DeviceSerial} serial\n     * @param {string} filter\n     * @returns {Promise<string>} A promise that resolves with the path to the temporary directory containing the logs, or rejects with an error message if the serial number is invalid.\n     */\n    logs(serial:DeviceSerial, filter:string) {\n        if (!_checkSerial(serial)) return Promise.reject('invalid serial number');\n\n        return exec('mktemp', ['-d']).then((output) => {\n            let stdout = output[0];\n            let stderr = output[1];\n\n            let tmpDir = stdout.trim();\n            let args = ['-u', serial];\n            if (filter) {\n                args.push('-f');\n                args.push(filter);\n            }\n            args.push(tmpDir);\n            return exec('idevicecrashreport', args).then(() => {\n                return tmpDir; \n            });\n        });\n    }\n    \n}\n\nexport default iDeviceClient;"]}