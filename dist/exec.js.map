{"version":3,"file":"exec.js","sourceRoot":"/","sources":["exec.ts"],"names":[],"mappings":";;AAAA,+CAAgD;AAGhD;;;;;;;;;;;;;;GAcG;AACH,IAAI,IAAI,GAAG,CAAC,GAAW,EAAE,IAAc,EAAE,SAAiB;IACtD,QAAQ,EAAE,MAAwB;IAClC,OAAO,EAAE,KAAK;IACd,SAAS,EAAE,GAAG,GAAC,IAAI,GAAC,IAAI;IACxB,UAAU,EAAE,SAA2B;IACvC,GAAG,EAAE,SAAS;IACd,GAAG,EAAE,SAAS;CACjB,EAA6B,EAAE;IAC5B,OAAO,IAAI,OAAO,CAAC,CAAC,OAAO,EAAE,MAAM,EAAE,EAAE;QACnC,aAAa,CAAC,QAAQ,CAAC,GAAG,EAAE,IAAI,EAAE,MAAM,EAAE,CAAC,GAA2C,EAAE,MAAa,EAAE,MAAa,EAAE,EAAE;YACpH,IAAI,GAAG,EAAE,CAAC;gBACN,MAAM,CAAC,CAAC,GAAG,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;YAClC,CAAC;iBAAM,CAAC;gBACJ,OAAO,CAAC,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;YAC9B,CAAC;QACL,CAAC,CAAC,CAAC;IACP,CAAC,CAAC,CAAC;AACP,CAAC,CAAC;AAEF,kBAAe,IAAI,CAAC","sourcesContent":["import child_process = require('child_process');\n\n\n/**\n * Executes a command in a child process.\n *\n * @param {string} cmd - The command to execute.\n * @param {string[]} args - The arguments to pass to the command.\n * @param {object} option - The options to use for the execution. This object can contain the following properties:\n *   - encoding: The encoding to use for the output. Default is 'utf8'.\n *   - timeout: The maximum time to wait for the command to finish, in milliseconds. Default is 30000.\n *   - maxBuffer: The maximum amount of data (in bytes) that can be passed to stdout or stderr. Default is 256*1024*1024.\n *   - killSignal: The signal to use to kill the process. Default is 'SIGTERM'.\n *   - cwd: The working directory to use for the command. Default is undefined.\n *   - env: The environment variables to use for the command. Default is undefined.\n * @returns {Promise<string[]>} A promise that resolves with an array containing the stdout and stderr of the command, or rejects with an array containing the error, stdout, and stderr if the command fails.\n *\n */\nlet exec = (cmd: string, args: string[], option: object = {\n    encoding: 'utf8' as BufferEncoding,\n    timeout: 30000,\n    maxBuffer: 256*1024*1024,\n    killSignal: 'SIGTERM' as NodeJS.Signals,\n    cwd: undefined,\n    env: undefined\n}): Promise<[string, string]> => {\n    return new Promise((resolve, reject) => {\n        child_process.execFile(cmd, args, option, (err: child_process.ExecFileException | null, stdout:string, stderr:string) => {\n            if (err) {\n                reject([err, stdout, stderr]);\n            } else {\n                resolve([stdout, stderr]);\n            }\n        });\n    });\n};\n\nexport default exec;"]}